<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:amq="http://activemq.apache.org/schema/core" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/jms
        				http://www.springframework.org/schema/jms/spring-jms.xsd
        				http://activemq.apache.org/schema/core
        				http://activemq.apache.org/schema/core/activemq-core.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.jsz.peini" />
	<!-- 打开aop 注解 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:config.properties,classpath:redis.properties,classpath:http-client.properties,classpath:activemq.properties" />
	<!-- 数据库连接池配置 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="100" />
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
		<property name="maxWait" value="60000" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT NOW() FROM DUAL" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
		<property name="connectionInitSqls" value="set names utf8mb4;" />
	</bean>
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:spring-mybatis.xml" />
		<property name="mapperLocations" value="classpath*:com/jsz/peini/mapping/*.xml" />
		<property name="typeAliasesPackage" value="com.jsz.peini.bean" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sessionFactory" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jsz.peini.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--配置 redis 连接池信息 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
		</property>
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"></property>
	</bean>
	<!-- *****************************************httpclient******************************************************************* -->
	<!-- httpclient连接池配置 -->
	<bean id="poolingHttpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" destroy-method="close">
		<!-- 设置连接总数 -->
		<property name="maxTotal" value="${http.pool.maxTotal}"></property>
		<!-- 设置每个地址的并发数 -->
		<property name="defaultMaxPerRoute" value="${http.pool.defaultMaxPerRoute}"></property>
	</bean>
	<!-- ssl工厂 -->
	<!-- <bean id="httpSSLContextBuilder" class="org.apache.http.ssl.SSLContextBuilder" factory-method="create" /> <bean id="httpSSLContextBuilderFactory" class="com.jsz.peini.component.SSLContextBuilderFactory" factory-method="create"> <property name="httpSSLContextBuilder" ref="httpSSLContextBuilder"></property> </bean> <bean id="httpSSLContext" factory-bean="httpSSLContextBuilderFactory" factory-method="build" /> <bean id="defaultHostnameVerifier" class="org.apache.http.conn.ssl.DefaultHostnameVerifier" /> <bean id="httpSSLConnectionSocketFactory" class="org.apache.http.conn.ssl.SSLConnectionSocketFactory"> <constructor-arg name="sslContext" ref="httpSSLContext" /> <constructor-arg name="supportedProtocols"> <array 
		value-type="java.lang.String"> <value>TLSv1</value> </array> </constructor-arg> <constructor-arg name="supportedCipherSuites"> <null /> </constructor-arg> <constructor-arg name="hostnameVerifier" ref="defaultHostnameVerifier" /> </bean> -->
	<!-- 定义 HttpClient工厂，这里使用HttpClientBuilder构建 -->
	<bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
		<property name="connectionManager" ref="poolingHttpClientConnectionManager" />
		<!-- <property name="SSLSocketFactory" ref="httpSSLConnectionSocketFactory"></property> -->
	</bean>

	<!-- 得到httpClient的实例 -->
	<bean id="httpClient" factory-bean="httpClientBuilder" factory-method="build" />
	<!-- 定义requestConfig的工厂 -->
	<bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
		<!-- 从连接池中获取到连接的最长时间 -->
		<property name="connectionRequestTimeout" value="${http.request.connectionRequestTimeout}" />
		<!-- 创建连接的最长时间 -->
		<property name="connectTimeout" value="${http.request.connectTimeout}" />
		<!-- 数据传输的最长时间 -->
		<property name="socketTimeout" value="${http.request.socketTimeout}" />
		<!-- 提交请求前测试连接是否可用 -->
		<!-- <property name="staleConnectionCheckEnabled" value="${http.request.staleConnectionCheckEnabled}"/> -->
	</bean>
	<!-- 得到requestConfig实例 -->
	<bean id="requestConfig" factory-bean="requestConfigBuilder" factory-method="build" />
	<!-- thread manage -->
	<!-- 定期清理无效的http-client连接 -->
	<bean class="com.jsz.peini.thread.HttpConnectionThread" destroy-method="shutdown">
		<constructor-arg name="poolingHttpClientConnectionManager" ref="poolingHttpClientConnectionManager" />
		<!-- 间隔30秒清理一次 -->
		<constructor-arg name="waitTime" value="${http.request.waitTime}" />
	</bean>
	<!-- *******************************************************MQ_INFO******************************************** -->
	<amq:connectionFactory id="amqConfig" brokerURL="${mq.url}" userName="${mq.userName}" password="${mq.password}"/>
	<!-- 配置JMS连接工厂 -->
	<bean id="mqConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<constructor-arg name="targetConnectionFactory" ref="amqConfig" />
		<property name="sessionCacheSize" value="${mq.sessionCacheSize}" />
	</bean>
	<!-- 定义消息队列（Queue） -->
	<bean id="mqQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg name="name" value="mqQueueDemo" />
	</bean>
	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	<bean id="jmsTemplateQueue" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="mqConnectionFactory" />
		<property name="defaultDestination" ref="mqQueue" />
		<property name="receiveTimeout" value="${mq.consumer.receiveTimeout}" />
		<!-- true是topic，false是queue，默认是false，此处显示写出false -->
		<property name="pubSubDomain" value="false" />
	</bean>
	<!-- 配置消息队列监听者（Queue） 自行实现-->
	<bean id="mqQueueDemoListener" class="com.jsz.peini.util.mq.MQQueueDemoListener" />
	<!-- 显示注入消息监听容器（Queue），配置连接工厂，监听的目标是demoQueueDestination，监听器是上面定义的监听器 -->
	<bean id="queueListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="mqConnectionFactory" />
		<property name="destination" ref="mqQueue" />
		<property name="messageListener" ref="mqQueueDemoListener" />
	</bean>
	<!-- <bean class="com.jsz.peini.thread.FestivalAwardQueueThread" init-method="init" destroy-method="shutdown"> <constructor-arg name="blockTimeOut" value="${redis.blockTimeOut}" /> <constructor-arg name="maxAwardId" value="${redis.maxAwardId}" /> </bean> -->
	<!-- <bean class="com.jsz.peini.thread.TestThread" init-method="init" destroy-method="shutdown"> <constructor-arg name="blockTimeOut" value="${redis.blockTimeOut}" /> </bean> -->
</beans>